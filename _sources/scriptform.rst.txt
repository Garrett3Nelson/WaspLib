
ScriptForm
==========
ScriptForm methods. ScriptForm is the main form used in wasplib scripts.


------------

RewriteCredentials
~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure RewriteCredentials();

Internal method used to rewrite the credentials.simba file.
This will use whatever is stored at the moment in **Login.Players**


------------

UpdateFormSize
~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure UpdateFormSize(Form: TForm; Width, Height: Int32);

Helper wrapper function to resize a form in one line.


------------

NumberField
~~~~~~~~~~~
.. code-block:: pascal

 procedure NumberField(Sender: TObject; var Key: char);

Helper method to limit user input to numbers and certain characters (spaces, commas and -).


------------

type TAccountManagerPanel
~~~~~~~~~~~~~~~~~~~~~~~~~

Helper type to handle the Account Manager panel.


------------

AccountManagerPanel.ClearInputs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TAccountManagerPanel.ClearInputs(Sender: TObject);

Callback method used internally to clear all inputs on the Account Manager panel.


------------

AccountManagerPanel.FillInputs
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TAccountManagerPanel.FillInputs(Sender: TObject);

Callback method used internally to populate inputs with the current accout info.


------------

AccountManagerPanel.WorldsKeyPress
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TAccountManagerPanel.WorldsKeyPress(Sender: TObject; var Key: char);

Callback method used internally to block unwanted keys in the "worlds" field.


------------

AccountManagerPanel.Setup
~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TAccountManagerPanel.Setup(AOwner: TComponent); overload;

Internal function used to setup the account manager.


------------

type TAntibanPanel
~~~~~~~~~~~~~~~~~~

Helper type to handle the Antiban panel.


------------

AntibanPanel.AntibanStateOnChange
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TAntibanPanel.AntibanStateOnChange(Sender: TObject);

Callback method used internally to react to **AntibanPanel.AntibanState** change.


------------

AntibanPanel.ShowAdvanced
~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TAntibanPanel.ShowAdvanced(Sender: TObject);

Callback method used internally to toggle the advanced section of the antiban panel.


------------

AntibanPanel.Setup
~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TAntibanPanel.Setup(AOwner: TComponent); overload;

Internal function used to setup the antiban panel.


------------

type TRemoteInputPanel
~~~~~~~~~~~~~~~~~~~~~~

Helper type to handle the RemoteInput panel.


------------

RemoteInputPanel.StateOnChange
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TRemoteInputPanel.StateOnChange(Sender: TObject);

Callback method used internally to react to **RemoteInputPanel.State** change.


------------

RemoteInputPanel.HUDOnChange
~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TRemoteInputPanel.HUDOnChange(Sender: TObject);

Callback method used internally to react to **RemoteInputPanel.HUD** change.


------------

RemoteInputPanel.DebugOnChange
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TRemoteInputPanel.DebugOnChange(Sender: TObject);

Callback method used internally to react to **RemoteInputPanel.Debug** change.


------------

RemoteInputPanel.Setup
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TRemoteInputPanel.Setup(AOwner: TComponent); overload;

Internal function used to setup the remote input panel.


------------

type TAPIPanel
~~~~~~~~~~~~~~~~
.. code-block:: pascal


  TAPIPanel = record(TLabeledPanel)
    UUID:         TLabeledEdit;
    Password:     TLabeledEdit;
    NewPassword:  TLabeledEdit;
    Username:     TLabeledEdit;
  end;

Helper type to handle the Stats panel.


------------

APIPanel.Setup
~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TAPIPanel.Setup(AOwner: TComponent); overload;

Internal function used to setup the remote input panel.


------------

type TConsumablePanel
~~~~~~~~~~~~~~~~~~~~~

Helper type to handle the consumable panels.


------------

TConsumablePanel.Setup
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TConsumablePanel.Setup(AOwner: TComponent; ConsumableType: ERSConsumable; UseBank: Boolean);

Method used to setup a TConsumablePanel panel. Check **ERSConsumable** to know which types of TConsumablePanel you can create.


------------

type TWaspLibPanel
~~~~~~~~~~~~~~~~~~

Helper type to handle the WaspLib panel.


------------

WaspLibPanel.BankSelectorOnChange
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TWaspLibPanel.BankSelectorOnChange(Sender: TObject);

Callback method used internally to react to **WaspLibPanel.BankSelector** change.
Basically is what updated the global variable **WLSettings.BankLocation**.


------------

WaspLibPanel.Setup
~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TWaspLibPanel.Setup(AOwner: TComponent; UseFood, UsePrayer, UseBank: Boolean = False); overload;

Method used to setup the WaspLib panel.
Optionally you can pass boolean values to UseFood, UsePrayer, UseBank to make extra panels visible.


------------

type TScriptForm
~~~~~~~~~~~~~~~~

Main type to handle Script forms.
This uses all the previous helper types as sort of plugins that can be setup or not as the user wishes.


------------

ScriptForm.ReloadSelector
~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TScriptForm.ReloadSelector(Sender: TObject);

Callback method used internally to react to **TScriptForm.AMPanel.AccountSelector** change.


------------

ScriptForm.OnAddClick
~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TScriptForm.OnAddClick(Sender: TObject);

Callback method used internally to react to **TScriptForm.AMPanel.AccountAddButton** click.
Due to the design of TScriptForm this has to be included here instead of TAccountManagerPanel.


------------

ScriptForm.OnSaveClick
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TScriptForm.OnSaveClick(Sender: TObject);

Callback method used internally to react to **TScriptForm.AMPanel.AccountSaveButton** click.
Due to the design of TScriptForm this has to be included here instead of TAccountManagerPanel.


------------

ScriptForm.OnDeleteClick
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TScriptForm.OnDeleteClick(Sender: TObject);

Callback method used internally to react to **TScriptForm.AMPanel.AccountDeleteButton** click.
Due to the design of TScriptForm this has to be included here instead of TAccountManagerPanel.


------------

ScriptForm.SelectorOnChange
~~~~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TScriptForm.SelectorOnChange(Sender: TObject);

Callback method used internally to react to **TScriptForm.AMPanel.AccountSelector** change.
Due to the design of TScriptForm this has to be included here instead of TAccountManagerPanel.


------------

ScriptForm.SelectorKey
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TScriptForm.SelectorKey(Sender: TObject; var Key: char);

TODO: forgot what this was for lol........ keyboard input? idk... might delete.


------------

ScriptForm.Setup
~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TScriptForm.Setup(UseFood, UsePrayer, UseBank: Boolean);
.. code-block:: pascal

 procedure TScriptForm.Setup(); overload;

Methods used to setup the a TScriptForm. Can be optionally be passed in booleans to toggle on/off some panels.


------------

ScriptForm.Init
~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TScriptForm.Init(Sender: TObject);

Method used to load the variables set in the Script form to be used by our script.
Unless you are using a vanilla form it's likely you will want to override this.


------------

ScriptForm.Run
~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TScriptForm.Run();

Method used to run the TScriptForm.
This is meant to be overriden and call **TScriptForm.Setup()**.
The reason it doesn't call it already is because users are likely to modify
TScriptForm to their needs and **TScriptForm.Setup()** needs to be called
in the user script to load his changes.

Example
-------
.. code-block:: pascal  
  type
    TConfig = record(TScriptForm)
      Str: String;
    end;

  procedure TConfig.StartScript(Sender: TObject);
  begin
    Self.Init(Sender);

    WLSettings.MaxActions := StrToInt(Self.WLPanel.ActionLimit.GetText());
    WLSettings.MaxTime    := StrToInt64(Self.WLPanel.TimeLimit.GetText());
  end;

  procedure TConfig.Setup; override;
  begin
    inherited;

    Str := 'Hello world';

    Self.WLPanel.StartButton.setOnClick(@Self.StartScript);
  end;

  procedure TConfig.Run; override;
  begin
    Self.Setup();  //Load your overriden TScriptForm.Setup()

    inherited;     //Call this TScriptForm.Run() to display the form.
  end;


------------
