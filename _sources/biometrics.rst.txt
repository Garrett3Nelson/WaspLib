
Biometrics
==========
Methods related to biometrics that make your account behave in a unique way.


------------

GenerateUUIDV4
~~~~~~~~~~~~~~
.. code-block:: pascal

 function GenerateUUIDV4(): String;

Generate a UUID.

Example
-------
.. code-block:: pascal  

  WriteLn GenerateUUIDV4();


------------

var BioHash
~~~~~~~~~~~
  Global BioHash variable.
  BioHash is a unique ID of each account and can be used to influence several things.


------------

var BioHashOverride
~~~~~~~~~~~~~~~~~~~
  Global BioHashOverride variable.
  If set, will override whatever would be generated for BioHash instead.


------------

type EBioBehavior
~~~~~~~~~~~~~~~~~
.. code-block:: pascal


  EBioBehavior = (
    MOUSE_SPEED=1,
    MOUSE_GRAVITY,
    MOUSE_WIND,
    MOUSE_MISS,
    FKEY_CHANCE,
    ESCAPE_CHANCE,
    KEYBOARD_CHAT_CHANCE,
    REACTION_SPEED,
    SPAM_CLICK_CHANCE,
    DROP_PATTERN,
    CONSUME_IN_BANK,
    USES_LIKE_BUTTONS,
    TENDS_TO_LIKE
  );

EBioBehavior is a enum that represent biohaviors affected by the user BioHash.


------------

Antiban.SetupBiometrics
~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TAntiban.SetupBiometrics();

This comes straight from older SRL versions.
This basically sets up our BioHash which is a hash of the current player login username. Because usernames are unique, so will the BioHash.


------------

Antiban.GetBehavior
~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TAntiban.GetBehavior(behavior: EBioBehavior): Int32;

Get the value that corresponds to the specified **behavior**.

Example
-------
.. code-block:: pascal  

  WriteLn Antiban.GetBehavior(FKEY_CHANCE);


------------

Antiban.GetChance
~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TAntiban.GetChance(behavior: EBioBehavior): Double;

Get a probability from the current biohash that is represented by **behavior**.

Example
-------
.. code-block:: pascal  

  WriteLn Antiban.GetChance(FKEY_CHANCE);


------------

Antiban.GetInfluencer
~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 function TAntiban.GetInfluencer(): Double;

This generates a random number that is influenced by BioHash.
There are times you will not want to use BioHash itself because it's value is static, this function let's you get a number that is random but heavily influenced by BioHash.

Example
-------
.. code-block:: pascal  

  Wait(Round(3000 * Antiban.GetInfluencer)));


------------

Antiban.GetUniqueNumber
~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal


  function TAntiban.GetUniqueNumber(input: Double): Double;
  function TAntiban.GetUniqueNumber(input, min: Double): Double; overload;
  function TAntiban.GetUniqueNumber(input, min, max: Double): Double; overload;

This generates a unique number based on your **input**.
The overloaded functions allow you to use some extra parameters for this like:
  Sum an amount to the result, so **Sum** will always be the minimum value you get.
  min and max cap. The number generated will be between **min** and **max**.

Example
-------
.. code-block:: pascal  

  FoodAmount := Antiban.GetUniqueNumber(7, 3, 15);


------------

Antiban.GetUniqueAverage
~~~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal


  function TAntiban.GetUniqueAverage(input: Double; Iterations: Integer): Double;
  function TAntiban.GetUniqueAverage(input, Sum: Double; Iterations: Integer): Double; overload;
  function TAntiban.GetUniqueAverage(input, min, max: Double; Iterations: Integer): Double; overload;

Functions to test **Antiban.GetUniqueNumber**.
It will run Antiban.GetUniqueNumber for how many **Iterations** you specify and average the results out.
Useful to know more or less what result to expect from your input.

Example
-------
.. code-block:: pascal  

  WriteLn Antiban.GetUniqueAverage(7, 3, 15, 500);


------------

Antiban.BioDice
~~~~~~~~~~~~~~~
.. code-block:: pascal


  function TAntiban.BioDice(): Boolean;
  function TAntiban.BioDice(Behaviour: EBioBehavior): Boolean; overload;
  function TAntiban.BioDice(chance: Double): Boolean; overload;

Throws a **SRL.Dice** heavily skewed in certain directions depending on your BioHash and the parameters passed in.

Example
-------
.. code-block:: pascal  

  UseBankEarly := Antiban.BioDice();
  WriteLn UseBankEarly;


------------

Antiban.SetSleepHour
~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TAntiban.SetSleepHour();

Sets WLSettings.Sleep.Hour based on the current BioHash.
WLSettings.Sleep.HourOverride will override this.

Example
-------
.. code-block:: pascal  

  Antiban.SetSleepHour();
  WriteLn WLSettings.Sleep.Hour;


------------

Antiban.SetSleepLength
~~~~~~~~~~~~~~~~~~~~~~
.. code-block:: pascal

 procedure TAntiban.SetSleepLength();

Sets WLSettings.Sleep.Length based on the current BioHash.
WLSettings.Sleep.LengthOverride will override this.

Example
-------
.. code-block:: pascal  

  Antiban.SetSleepLength();
  WriteLn WLSettings.Sleep.Length;


------------

BioWait
~~~~~~~
.. code-block:: pascal


  procedure BioWait(time: UInt32);
  procedure BioWait(min, max: UInt32; weight:EWaitDir=wdMean); overload;

Wait() but skewed with BioHash. This is a simple function. It just multiplies
**time**/**min**/**max** by BioHash and calls Wait() with them.
Might need further improvement in the future.

Example
-------
.. code-block:: pascal  

  Inventory.Open()
  BioWait(4000);
  Magic.Open();


------------
